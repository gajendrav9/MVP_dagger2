Github Json1:

folder
MainActivity
1.adapter  >>>MyArrayAdapter,RecyclerViewHolders

2.model>>> MyDataModel

3.parser>>>JsonParser

4.utils>>>>InternetConnection,keys



package gv.githubjson1;

import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;

import gv.githubjson1.adapter.MyArrayAdapter;
import gv.githubjson1.model.MyDataModel;
import gv.githubjson1.parser.Jsonparser;
import gv.githubjson1.utils.Keys;

public class MainActivity extends AppCompatActivity {
    private final String TAG="MainActivity";
    private RecyclerView recyclerView;
    private LinearLayoutManager layoutManager;
    private MyArrayAdapter adapter;
    private ArrayList<MyDataModel> alist;
    // private RecyclerView.ItemAnimator itemAnimator;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        //recyclerView.setItemAnimator(new itemAnimator(this));




        /**
         * Array list for binding data fromJSON to this list
         */
        alist=new ArrayList<>();

        /**
         * Binding that list to Adapter
         */
        adapter=new MyArrayAdapter(MainActivity.this,alist);
        /**
         * getting recycle view and setting adapter
         *
         */
        recyclerView=(RecyclerView)findViewById(R.id.rcv);
        recyclerView.setAdapter(adapter);
        layoutManager=new LinearLayoutManager(MainActivity.this);
        recyclerView.setLayoutManager(layoutManager);



        /**
         if(InternetConnection.checkConnection(getApplicationContext())){
         new GetDataTask().execute();
         }else {
         Toast.makeText(getApplicationContext(),"Internet connection not availble",Toast.LENGTH_LONG).show();

         }
         **/
        new GetDataTask().execute();


    }



    class GetDataTask extends AsyncTask<String,Void,String> {





        @Nullable
        @Override
        protected String doInBackground(String... params) {
            JSONObject jsonObject = Jsonparser.getDatafromWeb();

            try {
                /**
                 * Check Whether Its NULL???
                 */
                if (jsonObject != null) {
                    /**
                     * Check Length...
                     */
                    if (jsonObject.length() > 0) {
                        /**
                         * Getting Array named "contacts" From MAIN Json Object
                         */
                        JSONArray array = jsonObject.getJSONArray(Keys.KEY_CONTACTS);


                        for (int i = 0; i< array.length(); i++) {

                            /**
                             * Creating Every time New Object
                             * and
                             * Adding into List
                             */
                            MyDataModel model = new MyDataModel();

                            /**
                             * Getting Inner Object from contacts array...
                             * and
                             * From that We will get Name of that Contact
                             *
                             */
                            JSONObject innerObject = array.getJSONObject(i);
                            String name = innerObject.getString(Keys.KEY_NAME);
                            String add = innerObject.getString(Keys.KEY_EMAIL);
                            String des = innerObject.getString(Keys.KEY_PHONE);
                            String image = innerObject.getString(Keys.KEY_PROFILE_PIC);

                            /**
                             * Getting Object from Object "phone"
                             JSONObject phoneObject = innerObject.getJSONObject(Keys.KEY_PHONE);
                             String phone = phoneObject.getString(Keys.KEY_MOBILE);
                             */

                            model.setName(name);
                            model.setAdd(add);
                            model.setDes(des);
                            model.setImage(image);

                            /**
                             * Adding name and phone concatenation in List...
                             */
                            alist.add(model);
                        }
                    }
                }

            } catch (JSONException je) {
                Log.i(Jsonparser.TAG, "" + je.getLocalizedMessage());
            }
            return null;
        }


    }






















































}
